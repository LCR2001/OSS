##장소 추천을 위한 코사인 유사도 소스코드

import numpy as np
from numpy import dot
from numpy.linalg import norm
def cos_sim(A, B):
  return dot(A, B)/(norm(A)*norm(B))

// 각 장소에 대한 BoW 작성
amusement_park = np.array([1,1,0,1,0,1,0,0,0,0,0,0,0,1])
movie_theather = np.array([0,0,0,0,1,0,1,0,1,1,1,1,0,0])
workroom = np.array([1,0,1,1,0,0,1,1,1,0,0,0,0,1])
cafe = np.array([0,1,0,1,0,0,1,0,1,1,1,1,1,1])
game_field = np.array([1,1,0,1,0,1,0,0,1,1,1,0,1,0])
library = np.array([0,0,0,0,1,0,0,1,1,1,1,0,1,0])
park = np.array([1,1,0,1,0,1,1,0,1,1,1,1,1,1])
aquarium = np.array([1,0,0,1,0,0,1,0,0,0,0,1,0,1])
bookcafe = np.array([0,0,0,0,1,0,0,1,1,1,1,1,1,0])
boardcafe = np.array([0,1,0,1,0,0,0,0,1,1,1,0,1,0])
escaperoomcafe = np.array([1,1,0,1,0,0,0,0,1,0,1,0,0,0])

//장소 별 코사인 유사도 계산
print(cos_sim(amusement_park,movie_theater))
print(cos_sim(amusement_park,workroom))
print(cos_sim(amusement_park,cafe))
print(cos_sim(amusement_park,game_field))
print(cos_sim(amusement_park,library))
print(cos_sim(amusement_park,park))
print(cos_sim(amusement_park,aquarium))
print(cos_sim(amusement_park,bookcafe))
print(cos_sim(amusement_park,boardcafe))
print(cos_sim(amusement_park,escaperoomcafe))
print(cos_sim(movie_theater,workroom))
print(cos_sim(movie_theater,cafe))
print(cos_sim(movie_theater,game_field))
print(cos_sim(movie_theater,library))
print(cos_sim(movie_theater,park))
print(cos_sim(movie_theater,aquarium))
print(cos_sim(movie_theater,bookcafe))
print(cos_sim(movie_theater,boardcafe))
print(cos_sim(movie_theater,escaperoomcafe))
print(cos_sim(workroom,cafe))
print(cos_sim(workroom,game_field))
print(cos_sim(workroom,library))
print(cos_sim(workroom,park))
print(cos_sim(workroom,aquarium))
print(cos_sim(workroom,bookcafe))
print(cos_sim(workroom,boardcafe))
print(cos_sim(workroom,escaperoomcafe))
print(cos_sim(cafe,game_field))
print(cos_sim(cafe,library))
print(cos_sim(cafe,park))
print(cos_sim(cafe,aquarium))
print(cos_sim(cafe,bookcafe))
print(cos_sim(cafe,boardcafe))
print(cos_sim(cafe,escaperoomcafe))
print(cos_sim(game_field,library))
print(cos_sim(game_field,park))
print(cos_sim(game_field,aquarium))
print(cos_sim(game_field,bookcafe))
print(cos_sim(game_field,boardcafe))
print(cos_sim(game_field,escaperoomcafe))
print(cos_sim(library,park))
print(cos_sim(library,aquarium))
print(cos_sim(library,bookcafe))
print(cos_sim(library,boardcafe))
print(cos_sim(library,escaperoomcafe))
print(cos_sim(park,aquarium))
print(cos_sim(park,bookcafe))
print(cos_sim(park,boardcafe))
print(cos_sim(park,escaperoomcafe))
print(cos_sim(aquarium,bookcafe))
print(cos_sim(aquarium,boardcafe))
print(cos_sim(aquarium,escaperoomcafe))
print(cos_sim(bookcafe,boardcafe))
print(cos_sim(bookcafe,escaperoomcafe))
print(cos_sim(boardcafe,escaperoomcafe))

------------------------------------------------------------------------------------
[구현 목표 코드]
# IDF 행렬 만들기
IDF = []
for df in DF:
    IDF.append(np.log10(3/df))
    
# 각 문서 내 TF 계산
TF1 = []
TF2 = []
TF3 = []
TFsearch = []
for Term in Terms:
    TF1.append(DOC1.count(Term)/len(DOC1))
    TF2.append(DOC2.count(Term)/len(DOC2))
    TF3.append(DOC3.count(Term)/len(DOC3))
    TFsearch.append(Search2.count(Term)/len(Search2))

# TF-IDF 계산
TF1_IDF = []
TF2_IDF = []
TF3_IDF = []
TFsearch_IDF = []
for i in range(len(Terms)):
     TF1_IDF.append(IDF[i]*TF1[i])
     TF2_IDF.append(IDF[i]*TF2[i])
     TF3_IDF.append(IDF[i]*TF3[i])
     TFsearch_IDF.append(IDF[i]*TFsearch[i])

TF1_IDF= np.array(TF1_IDF)
TFsearch_IDF = np.array(TFsearch_IDF)

def cos_sim(A, B):
       return dot(A, B)/(norm(A)*norm(B))
   
Doc1_ = cos_sim(TFsearch_IDF,TF1_IDF)
Doc2_ = cos_sim(TFsearch_IDF,TF2_IDF)
Doc3_ = cos_sim(TFsearch_IDF,TF3_IDF)
